AWSTemplateFormatVersion: '2010-09-09'
Description: Network Stack

## Parameters
Parameters:
  EC2InstanceSize:
    Default: "t2.micro"
    Description: Instance size for Web Servers.
    Type: String
    AllowedValues:
      - "t2.small"
      - "t2.medium"
      - "t3.small"
      - "t3.medium"
      - "t2.micro"

  AMIPreviousVersionIndex:
    Description: Number of previous version of AMI to use [0=current AMI through 15]
    Type: Number
    Default: 8
    MinValue: 0
    MaxValue: 15

  AmazonLinux2AmiId:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Description: Latest Amazon Linux 2 AMI ID. Leave default.
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'


## Metadata
Metadata:

## Friendly UI grouping for parameters
#        - AmazonLinux2AmiId
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Instance Configuration
        Parameters:
        - EC2InstanceSize
        # - MyTrustedNetwork
        - AMIPreviousVersionIndex


    ParameterLabels:
      EC2InstanceSize:
        default: EC2 Instance Size


## Mappings
Mappings:
  EC2AMI:
    us-east-1:
      AmznLinux: ami-0b8d0d6ac70e5750c
    us-east-2:
      AmznLinux: ami-01aeea5586d1cb5e9
    us-west-1:
      AmznLinux: ami-01cd822533dfab45e
    us-west-2:
      AmznLinux: ami-0e07063c9635a53aa
    eu-west-1:
      AmznLinux: ami-0a166fb5b1a5d9532
    ap-northeast-1:
      AmznLinux: ami-0148288598227344a

## Resources
Resources:

## The VPC
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      CidrBlock: !Sub 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', vpc]]

## Create an IGW & attach it to the VPC
  vpcIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Igw]]
  attachIgwVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref vpcIgw

## Create a public subnet in each AZ
  subAPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.1.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubSubA]]
  subBPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.2.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubSubB]]

## Associate the public subnets with a public route table
  rtbPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubRoutes]]
  rteToIgw:
    Type: AWS::EC2::Route
    DependsOn: attachIgwVpc
    Properties:
      RouteTableId: !Ref rtbPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref vpcIgw
  srtaAPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subAPublic
      RouteTableId: !Ref rtbPublic
  srtaBPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subBPublic
      RouteTableId: !Ref rtbPublic

## Create a private subnet in each AZ
  subAPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.3.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PrvSubA]]
  subBPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.4.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PrvSubB]]

## Create a NAT Gateway & EIP
  natEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  vpcNgw:
    Type: AWS::EC2::NatGateway
    DependsOn: attachIgwVpc
    Properties:
      AllocationId: !GetAtt natEip.AllocationId
      SubnetId: !Ref subAPublic
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Ngw]]


## Create a NAT Gateway & EIP
  natEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  vpcNgw1:
    Type: AWS::EC2::NatGateway
    DependsOn: attachIgwVpc
    Properties:
      AllocationId: !GetAtt natEip1.AllocationId
      SubnetId: !Ref subBPublic
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Ngw1]]


## Associate the private subnets with a natted route table
  rtbNat:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', NgwRoutes]]
  rteToNgw:
    Type: AWS::EC2::Route
    DependsOn: vpcNgw
    Properties:
      RouteTableId: !Ref rtbNat
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref vpcNgw

  ## Associate the private subnets with a natted route table
  rtbNat1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', NgwRoutes1]]
  rteToNgw1:
    Type: AWS::EC2::Route
    DependsOn: vpcNgw1
    Properties:
      RouteTableId: !Ref rtbNat1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref vpcNgw1

  srtaANgw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subAPrivate
      RouteTableId: !Ref rtbNat
  srtaBNgw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subBPrivate
      RouteTableId: !Ref rtbNat

## Configure ALB: security group, load balancer, route 53 endpoint
  
  sgLoadBalancer1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          # CidrIp: !Ref MyTrustedNetwork
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join ["" , [!Ref natEip, "/30"]]
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', AlbSg]]

  # sgLoadBalancer2:
  #   # Condition: UseAutomatedScanner
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     VpcId: !Ref vpc
  #     GroupDescription: Load Balancer Security Group
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
          # CidrIp: !Ref MyTrustedNetwork
        # - IpProtocol: tcp
        #   FromPort: 80
        #   ToPort: 80
        #   CidrIp: !Ref ScannerIP01
        # - IpProtocol: tcp
        #   FromPort: 80
        #   ToPort: 80
      #   #   CidrIp: !Ref ScannerIP02
      #   - IpProtocol: tcp
      #     FromPort: 80
      #     ToPort: 80
      #     CidrIp: !Join ["" , [!Ref natEip, "/32"]]
      # Tags:
      #   - Key: Name
      #     Value: !Join ["-" , [!Ref 'AWS::StackName', AlbSg]]

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Name: !Join ["-" , [!Ref 'AWS::StackName', Alb]]
      SecurityGroups: 
        - !GetAtt sgLoadBalancer1.GroupId
      Subnets: [ !Ref subAPublic, !Ref subBPublic ]
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Alb]]

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ["-" , [!Ref 'AWS::StackName', TargGrp]]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', TargGrp]]

  AlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: [ AlbTargetGroup ]
    Properties:
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup

## Configure the ECS ASG, security group, launch configuration, IAM role, load balancer, cloudwatch log group, route53 endpoint
  sgEC2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: EC2 Instance Security Group
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', EC2Sg]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref 'sgLoadBalancer1'

#        Fn::FindInMap:
#        - EC2AMI
#        - !Ref AWS::Region
#        - AmznLinux

#        !Ref AmazonLinux2AmiId

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        !GetAtt AMIInfo.Id
      SecurityGroups:
      - !GetAtt sgEC2Sg.GroupId
      InstanceType: !Ref EC2InstanceSize
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          echo "this is my test site" > index.html
        
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          curl --silent --location https://rpm.nodesource.com/setup_10.x | bash -
          amazon-linux-extras install -y php7.2

          # /usr/bin/aws configure set region ${AWS::Region}
          # /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets site_config --region ${AWS::Region}
          # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}


  AutoScalingGroup:
    DependsOn: Alb
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref subAPrivate
      - !Ref subBPrivate
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs:
      - !Ref AlbTargetGroup
      DesiredCapacity: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      Tags:
       -
        Key: Name
        Value: !Join ["-" , [!Ref 'AWS::StackName', node]]
        PropagateAtLaunch: true
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT10M
    # UpdatePolicy:
    #   AutoScalingReplacingUpdate:
    #     WillReplace: 'true'



##  Configure the EC2 IAM role along with supporting resources
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-" , [!Ref 'AWS::StackName', EC2Role]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "ssm.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: [ "waf-regional:GetSampledRequests", "cloudwatch:GetMetricStatistics" ]
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
              -
                Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: '*'
                  # - !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactsBucket']]
              -
                Action:
                  - s3:GetObject
                Effect: Allow
                Resource: '*'
                  # - !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactsBucket', /, /*]]

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: EC2InstanceRole



  AMILambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"

# AMIInfoFunction - Look up an AMI based on a NameFilter
#
# This AWS Lambda function is used to look up an Amazon EC2 AMI based
# on a name filter. An example of a name filter would be:
#
# amzn2-ami-hvm\*ebs
#
# After looking up the names of all images that satify the filter,
# they are sorted in reverse by date/time stamp and the first AMI
# ID (which corresponds to the newest AMI) is returned.
#
# Using a Lambda function makes it possible to look up the AMI
# dynamically.  THe alternative would be to create a static map.

  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Description: "Look up an AMI based on a filter"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt AMILambdaExecutionRole.Arn
      Runtime: "python3.6"
      Timeout: 30
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import cfnresponse
          def handler(event, context):
            if event['RequestType'] == 'Delete':
              responseData = {}      
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return
            
            ec2=boto3.client('ec2')
            imageDescriptions=ec2.describe_images(
              Owners=['amazon'],
              Filters=[
                {'Name': 'name', 'Values': [event['ResourceProperties']['NameFilter']]}
              ],
            )
            
            numImageDescriptions = len(imageDescriptions['Images'])
            if numImageDescriptions < 2:
              responseData = {}
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
            else:
              amiNames = sorted(imageDescriptions['Images'],
                key=lambda x: x['CreationDate'],
                reverse=True)
              responseData = {}
              responseData['Id'] = amiNames[${AMIPreviousVersionIndex}]['ImageId']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            return

# AMIInfo - The AWS Lambda-backed resource for looking up an Amazon EC2 AMI
#
# Parameters
#
# ServiceToken - a pointer to the AWS Lambda function
# NameFilter - the name filter to pass to the describe_images API

#            !Ref AmazonLinux2AmiId


  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt AMIInfoFunction.Arn
      NameFilter: 'amzn2-ami-hvm*gp2'

  # RedTeamHost:
  #     Type: AWS::EC2::Instance
  #     Metadata:
  #       AWS::CloudFormation::Init:
  #         configSets:
  #             Scanner_Install:
  #               - configure_scanner
  #         configure_scanner:
  #           commands:
  #             download:
  #               cwd: /usr/bin
  #               command: "cd /usr/bin; curl -O https://s3.amazonaws.com/protecting-workloads-workshop/public/artifacts/scanner.py"
  #     Properties:
  #       ImageId:
  #         !GetAtt AMIInfo.Id
  #       InstanceType: !Ref EC2InstanceSize
  #       IamInstanceProfile:
  #         Ref: EC2InstanceProfile
  #       SubnetId:
  #             Ref: sub2Private          
  #       Tags:
  #       - Key: Name
  #         Value: !Join ["-" , [!Ref 'AWS::StackName', RedTeamHost]]
  #       UserData:
  #         Fn::Base64: !Sub |
  #           #!/bin/bash -xe
  #           # yum update -y
  #           yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
  #           amazon-linux-extras install -y python3 
  #           sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  #           yum install -y curl git httpie
  #           /usr/bin/aws configure set region ${AWS::Region}
  #           /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource RedTeamHost --configsets Scanner_Install --region ${AWS::Region}
  #           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource RedTeamHost --region ${AWS::Region}
  #     CreationPolicy:
  #       ResourceSignal:
  #         Timeout: PT15M

## Outputs
Outputs:
  cfnVersion:
    Value: 0.1
  accountId:
    Value: !Ref AWS::AccountId
  albEndpoint:
    Value: !Join ['', ['http://', !GetAtt Alb.DNSName]]
    Export:
      Name: !Sub '${AWS::StackName}-alb'
  vpc:
    Description: 'vpc.'
    Value: !Ref vpc
    Export:
      Name: !Sub '${AWS::StackName}-vpc'
  VpcId:
    Value: !Ref vpc
    Export:
      Name: VpcId
